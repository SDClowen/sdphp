#!/usr/bin/env php
<?php
declare(strict_types=1);

$autoloadPath = $GLOBALS["_composer_autoload_path"];
$dir = dirname($autoloadPath)."/../";

if(!(isset($autoloadPath) && include $autoloadPath)) {
	fwrite(STDERR, "Install packages using Composer.\n");
	exit(1);
}

# dummy function cuz of used in Database class
function stackMessages(){}
define("APP_DIR", $dir."app");

use Core\Database;

define("db", Database::get());
define("config", (object)include(APP_DIR . "/config/database.php"));


const installQueries = [
    "mysql" => "
        CREATE TABLE IF NOT EXISTS `config` (
            `name` varchar(50) NOT NULL,
            `value` varchar(100) NOT NULL
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
          
          CREATE TABLE IF NOT EXISTS `password_reset_tokens` (
            `email` varchar(255) NOT NULL,
            `token` varchar(255) NOT NULL,
            `created_at` timestamp NULL DEFAULT NULL,
            PRIMARY KEY (`email`)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
          
          CREATE TABLE IF NOT EXISTS `users` (
            `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
            `name` varchar(64) NOT NULL,
            `username` varchar(50) NOT NULL,
            `email` varchar(64) NOT NULL,
            `email_verified_at` timestamp NULL DEFAULT NULL,
            `password` varchar(64) NOT NULL,
            `prevPassword` varchar(64) NOT NULL DEFAULT '',
            `remember_token` varchar(100) DEFAULT NULL,
            `pin_token` varchar(64) DEFAULT NULL,
            `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
            `updated_at` timestamp NOT NULL DEFAULT current_timestamp(),
            PRIMARY KEY (`id`),
            UNIQUE KEY `users_email_unique` (`email`)
          ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;    
    ",
    "sqlsrv" => "
        CREATE TABLE {{DB_NAME}}..config (
            name varchar(50) NOT NULL,
            value varchar(100) NOT NULL
        );

        CREATE TABLE {{DB_NAME}}..password_reset_tokens (
            email varchar(255) NOT NULL,
            token varchar(255) NOT NULL,
            created_at datetime2 NULL DEFAULT NULL,
            PRIMARY KEY (email)
        );

        CREATE TABLE {{DB_NAME}}..users (
            id bigint check (id > 0) NOT NULL IDENTITY,
            name varchar(64) NOT NULL,
            username varchar(50) NOT NULL,
            email varchar(64) NOT NULL,
            email_verified_at datetime2 NULL DEFAULT NULL,
            password varchar(64) NOT NULL,
            prevPassword varchar(64) NOT NULL DEFAULT '',
            remember_token varchar(100) DEFAULT NULL,
            pin_token varchar(64) DEFAULT NULL,
            created_at datetime2 NOT NULL DEFAULT current_timestamp,
            updated_at datetime2 NOT NULL DEFAULT current_timestamp,
            PRIMARY KEY (id),
            CONSTRAINT users_email_unique UNIQUE  (email)
        );
    "
];

const files = [
    "controller" => "
<?php 
namespace App\Controllers;

use Core\{Controller, Request};
use Core\Attributes\\route;

class [[controller_name]] extends Controller
{
    #[route(method: route::get)]
    public function index()
    {
        # code....
    }
}
",
    "model" => "
<?php 
namespace App\Models;

use Core\{Model, Database};

class [[model_name]] extends Model
{
    public function hello()
    {
        # code....
    }
}
"
];

if (count($argv) <= 1)
    return;

$command = explode(":", $argv[1]);

switch ($command[0]) {
    case "make":
        sd_make($command[1], $argv[2]);
        break;
    case "install":
        sd_install();
        break;
    default:
        print(c("Unknown command").c($command[0], "e"));
        break;
}

function c($str, $type = 'i')
{
    switch ($type) {
        case 'e': //error
            return "\033[31m$str \033[0m\n";
        case 's': //success
            return "\033[32m$str \033[0m\n";
        case 'w': //warning
            return "\033[33m$str \033[0m\n";
        case 'i': //info
            return "\033[36m$str \033[0m\n";
    }
}

function sd_install()
{
    $query = str_replace("{{DB_NAME}}", config->name, installQueries[config->driver]);
    
    try{
        db->pdo->exec($query);
        die(c("sdphp successfully installed!\nYou can create first controller via this command 'vendor/bin/sdphp make:controller Welcome'", "s"));
    }
    catch(PDOException $error)
    {
        die(c($error, "e"));
    }
}

function sd_make($command, $value)
{
    switch ($command) {
        case "controller":
            $path = __DIR__ . "/../app/controllers/" . $value . ".php";
            if (file_exists($path))
                die(c($path . " already exists!", "e"));

            file_put_contents($path, trim(str_replace("[[controller_name]]", $value, files["controller"])));
            echo c("Successfully created the $value controller", "s");
            break;

        case "model":
            $path = __DIR__ . "/../app/models/" . $value . ".php";
            if (file_exists($path))
                die(c($path . " already exists!", "e"));

            file_put_contents($path, trim(str_replace("[[model_name]]", $value, files["model"])));
            echo c("Successfully created the $value model", "s");
            break;

        default:
            echo c("[make] Unknown command $command", "e");
            break;
    }
}


?>